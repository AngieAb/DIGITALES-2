// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/22/2018 07:05:20"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Proyecto
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Proyecto_vlg_sample_tst(
	Amarillo,
	Azul,
	Clock,
	Clock_1s,
	Clock_100k,
	Consultar,
	Jugar,
	Reset,
	Rojo,
	Start,
	Verde,
	sampler_tx
);
input  Amarillo;
input  Azul;
input  Clock;
input  Clock_1s;
input  Clock_100k;
input  Consultar;
input  Jugar;
input  Reset;
input  Rojo;
input  Start;
input  Verde;
output sampler_tx;

reg sample;
time current_time;
always @(Amarillo or Azul or Clock or Clock_1s or Clock_100k or Consultar or Jugar or Reset or Rojo or Start or Verde)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Proyecto_vlg_check_tst (
	Color,
	cont,
	dificil,
	Disp_Decenas,
	Disp_Unidades,
	En_cont,
	En_RC,
	ESTADOS,
	facil,
	Hay_3C,
	Led_Am,
	Led_Az,
	Led_Oport,
	Led_p,
	Led_R,
	Led_V,
	medio,
	P_Acu,
	Puntos,
	sampler_rx
);
input [3:0] Color;
input [5:0] cont;
input  dificil;
input [6:0] Disp_Decenas;
input [6:0] Disp_Unidades;
input  En_cont;
input  En_RC;
input [4:0] ESTADOS;
input  facil;
input [3:0] Hay_3C;
input [4:0] Led_Am;
input [4:0] Led_Az;
input [2:0] Led_Oport;
input  Led_p;
input [4:0] Led_R;
input [4:0] Led_V;
input  medio;
input [5:0] P_Acu;
input [5:0] Puntos;
input sampler_rx;

reg [3:0] Color_expected;
reg [5:0] cont_expected;
reg  dificil_expected;
reg [6:0] Disp_Decenas_expected;
reg [6:0] Disp_Unidades_expected;
reg  En_cont_expected;
reg  En_RC_expected;
reg [4:0] ESTADOS_expected;
reg  facil_expected;
reg [3:0] Hay_3C_expected;
reg [4:0] Led_Am_expected;
reg [4:0] Led_Az_expected;
reg [2:0] Led_Oport_expected;
reg  Led_p_expected;
reg [4:0] Led_R_expected;
reg [4:0] Led_V_expected;
reg  medio_expected;
reg [5:0] P_Acu_expected;
reg [5:0] Puntos_expected;

reg [3:0] Color_prev;
reg [5:0] cont_prev;
reg  dificil_prev;
reg [6:0] Disp_Decenas_prev;
reg [6:0] Disp_Unidades_prev;
reg  En_cont_prev;
reg  En_RC_prev;
reg [4:0] ESTADOS_prev;
reg  facil_prev;
reg [3:0] Hay_3C_prev;
reg [4:0] Led_Am_prev;
reg [4:0] Led_Az_prev;
reg [2:0] Led_Oport_prev;
reg  Led_p_prev;
reg [4:0] Led_R_prev;
reg [4:0] Led_V_prev;
reg  medio_prev;
reg [5:0] P_Acu_prev;
reg [5:0] Puntos_prev;

reg  dificil_expected_prev;
reg [6:0] Disp_Decenas_expected_prev;
reg [6:0] Disp_Unidades_expected_prev;
reg [4:0] ESTADOS_expected_prev;
reg  facil_expected_prev;
reg [4:0] Led_Am_expected_prev;
reg [4:0] Led_Az_expected_prev;
reg [2:0] Led_Oport_expected_prev;
reg [4:0] Led_R_expected_prev;
reg [4:0] Led_V_expected_prev;
reg  medio_expected_prev;
reg [5:0] P_Acu_expected_prev;
reg [5:0] Puntos_expected_prev;

reg  last_dificil_exp;
reg [6:0] last_Disp_Decenas_exp;
reg [6:0] last_Disp_Unidades_exp;
reg [4:0] last_ESTADOS_exp;
reg  last_facil_exp;
reg [4:0] last_Led_Am_exp;
reg [4:0] last_Led_Az_exp;
reg [2:0] last_Led_Oport_exp;
reg [4:0] last_Led_R_exp;
reg [4:0] last_Led_V_exp;
reg  last_medio_exp;
reg [5:0] last_P_Acu_exp;
reg [5:0] last_Puntos_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	Color_prev = Color;
	cont_prev = cont;
	dificil_prev = dificil;
	Disp_Decenas_prev = Disp_Decenas;
	Disp_Unidades_prev = Disp_Unidades;
	En_cont_prev = En_cont;
	En_RC_prev = En_RC;
	ESTADOS_prev = ESTADOS;
	facil_prev = facil;
	Hay_3C_prev = Hay_3C;
	Led_Am_prev = Led_Am;
	Led_Az_prev = Led_Az;
	Led_Oport_prev = Led_Oport;
	Led_p_prev = Led_p;
	Led_R_prev = Led_R;
	Led_V_prev = Led_V;
	medio_prev = medio;
	P_Acu_prev = P_Acu;
	Puntos_prev = Puntos;
end

// update expected /o prevs

always @(trigger)
begin
	dificil_expected_prev = dificil_expected;
	Disp_Decenas_expected_prev = Disp_Decenas_expected;
	Disp_Unidades_expected_prev = Disp_Unidades_expected;
	ESTADOS_expected_prev = ESTADOS_expected;
	facil_expected_prev = facil_expected;
	Led_Am_expected_prev = Led_Am_expected;
	Led_Az_expected_prev = Led_Az_expected;
	Led_Oport_expected_prev = Led_Oport_expected;
	Led_R_expected_prev = Led_R_expected;
	Led_V_expected_prev = Led_V_expected;
	medio_expected_prev = medio_expected;
	P_Acu_expected_prev = P_Acu_expected;
	Puntos_expected_prev = Puntos_expected;
end


// expected Led_R[ 4 ]
initial
begin
	Led_R_expected[4] = 1'bX;
end 
// expected Led_R[ 3 ]
initial
begin
	Led_R_expected[3] = 1'bX;
end 
// expected Led_R[ 2 ]
initial
begin
	Led_R_expected[2] = 1'bX;
end 
// expected Led_R[ 1 ]
initial
begin
	Led_R_expected[1] = 1'bX;
end 
// expected Led_R[ 0 ]
initial
begin
	Led_R_expected[0] = 1'bX;
end 
// expected Led_V[ 4 ]
initial
begin
	Led_V_expected[4] = 1'bX;
end 
// expected Led_V[ 3 ]
initial
begin
	Led_V_expected[3] = 1'bX;
end 
// expected Led_V[ 2 ]
initial
begin
	Led_V_expected[2] = 1'bX;
end 
// expected Led_V[ 1 ]
initial
begin
	Led_V_expected[1] = 1'bX;
end 
// expected Led_V[ 0 ]
initial
begin
	Led_V_expected[0] = 1'bX;
end 
// expected Led_Am[ 4 ]
initial
begin
	Led_Am_expected[4] = 1'bX;
end 
// expected Led_Am[ 3 ]
initial
begin
	Led_Am_expected[3] = 1'bX;
end 
// expected Led_Am[ 2 ]
initial
begin
	Led_Am_expected[2] = 1'bX;
end 
// expected Led_Am[ 1 ]
initial
begin
	Led_Am_expected[1] = 1'bX;
end 
// expected Led_Am[ 0 ]
initial
begin
	Led_Am_expected[0] = 1'bX;
end 
// expected Led_Az[ 4 ]
initial
begin
	Led_Az_expected[4] = 1'bX;
end 
// expected Led_Az[ 3 ]
initial
begin
	Led_Az_expected[3] = 1'bX;
end 
// expected Led_Az[ 2 ]
initial
begin
	Led_Az_expected[2] = 1'bX;
end 
// expected Led_Az[ 1 ]
initial
begin
	Led_Az_expected[1] = 1'bX;
end 
// expected Led_Az[ 0 ]
initial
begin
	Led_Az_expected[0] = 1'bX;
end 
// expected Puntos[ 5 ]
initial
begin
	Puntos_expected[5] = 1'bX;
end 
// expected Puntos[ 4 ]
initial
begin
	Puntos_expected[4] = 1'bX;
end 
// expected Puntos[ 3 ]
initial
begin
	Puntos_expected[3] = 1'bX;
end 
// expected Puntos[ 2 ]
initial
begin
	Puntos_expected[2] = 1'bX;
end 
// expected Puntos[ 1 ]
initial
begin
	Puntos_expected[1] = 1'bX;
end 
// expected Puntos[ 0 ]
initial
begin
	Puntos_expected[0] = 1'bX;
end 
// expected P_Acu[ 5 ]
initial
begin
	P_Acu_expected[5] = 1'bX;
end 
// expected P_Acu[ 4 ]
initial
begin
	P_Acu_expected[4] = 1'bX;
end 
// expected P_Acu[ 3 ]
initial
begin
	P_Acu_expected[3] = 1'bX;
end 
// expected P_Acu[ 2 ]
initial
begin
	P_Acu_expected[2] = 1'bX;
end 
// expected P_Acu[ 1 ]
initial
begin
	P_Acu_expected[1] = 1'bX;
end 
// expected P_Acu[ 0 ]
initial
begin
	P_Acu_expected[0] = 1'bX;
end 
// expected Disp_Unidades[ 6 ]
initial
begin
	Disp_Unidades_expected[6] = 1'bX;
end 
// expected Disp_Unidades[ 5 ]
initial
begin
	Disp_Unidades_expected[5] = 1'bX;
end 
// expected Disp_Unidades[ 4 ]
initial
begin
	Disp_Unidades_expected[4] = 1'bX;
end 
// expected Disp_Unidades[ 3 ]
initial
begin
	Disp_Unidades_expected[3] = 1'bX;
end 
// expected Disp_Unidades[ 2 ]
initial
begin
	Disp_Unidades_expected[2] = 1'bX;
end 
// expected Disp_Unidades[ 1 ]
initial
begin
	Disp_Unidades_expected[1] = 1'bX;
end 
// expected Disp_Unidades[ 0 ]
initial
begin
	Disp_Unidades_expected[0] = 1'bX;
end 
// expected Disp_Decenas[ 6 ]
initial
begin
	Disp_Decenas_expected[6] = 1'bX;
end 
// expected Disp_Decenas[ 5 ]
initial
begin
	Disp_Decenas_expected[5] = 1'bX;
end 
// expected Disp_Decenas[ 4 ]
initial
begin
	Disp_Decenas_expected[4] = 1'bX;
end 
// expected Disp_Decenas[ 3 ]
initial
begin
	Disp_Decenas_expected[3] = 1'bX;
end 
// expected Disp_Decenas[ 2 ]
initial
begin
	Disp_Decenas_expected[2] = 1'bX;
end 
// expected Disp_Decenas[ 1 ]
initial
begin
	Disp_Decenas_expected[1] = 1'bX;
end 
// expected Disp_Decenas[ 0 ]
initial
begin
	Disp_Decenas_expected[0] = 1'bX;
end 
// expected Led_Oport[ 2 ]
initial
begin
	Led_Oport_expected[2] = 1'bX;
end 
// expected Led_Oport[ 1 ]
initial
begin
	Led_Oport_expected[1] = 1'bX;
end 
// expected Led_Oport[ 0 ]
initial
begin
	Led_Oport_expected[0] = 1'bX;
end 
// expected ESTADOS[ 4 ]
initial
begin
	ESTADOS_expected[4] = 1'bX;
end 
// expected ESTADOS[ 3 ]
initial
begin
	ESTADOS_expected[3] = 1'bX;
end 
// expected ESTADOS[ 2 ]
initial
begin
	ESTADOS_expected[2] = 1'bX;
end 
// expected ESTADOS[ 1 ]
initial
begin
	ESTADOS_expected[1] = 1'bX;
end 
// expected ESTADOS[ 0 ]
initial
begin
	ESTADOS_expected[0] = 1'bX;
end 

// expected facil
initial
begin
	facil_expected = 1'bX;
end 

// expected medio
initial
begin
	medio_expected = 1'bX;
end 

// expected dificil
initial
begin
	dificil_expected = 1'bX;
end 
// generate trigger
always @(Color_expected or Color or cont_expected or cont or dificil_expected or dificil or Disp_Decenas_expected or Disp_Decenas or Disp_Unidades_expected or Disp_Unidades or En_cont_expected or En_cont or En_RC_expected or En_RC or ESTADOS_expected or ESTADOS or facil_expected or facil or Hay_3C_expected or Hay_3C or Led_Am_expected or Led_Am or Led_Az_expected or Led_Az or Led_Oport_expected or Led_Oport or Led_p_expected or Led_p or Led_R_expected or Led_R or Led_V_expected or Led_V or medio_expected or medio or P_Acu_expected or P_Acu or Puntos_expected or Puntos)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Color = %b | expected cont = %b | expected dificil = %b | expected Disp_Decenas = %b | expected Disp_Unidades = %b | expected En_cont = %b | expected En_RC = %b | expected ESTADOS = %b | expected facil = %b | expected Hay_3C = %b | expected Led_Am = %b | expected Led_Az = %b | expected Led_Oport = %b | expected Led_p = %b | expected Led_R = %b | expected Led_V = %b | expected medio = %b | expected P_Acu = %b | expected Puntos = %b | ",Color_expected_prev,cont_expected_prev,dificil_expected_prev,Disp_Decenas_expected_prev,Disp_Unidades_expected_prev,En_cont_expected_prev,En_RC_expected_prev,ESTADOS_expected_prev,facil_expected_prev,Hay_3C_expected_prev,Led_Am_expected_prev,Led_Az_expected_prev,Led_Oport_expected_prev,Led_p_expected_prev,Led_R_expected_prev,Led_V_expected_prev,medio_expected_prev,P_Acu_expected_prev,Puntos_expected_prev);
	$display("| real Color = %b | real cont = %b | real dificil = %b | real Disp_Decenas = %b | real Disp_Unidades = %b | real En_cont = %b | real En_RC = %b | real ESTADOS = %b | real facil = %b | real Hay_3C = %b | real Led_Am = %b | real Led_Az = %b | real Led_Oport = %b | real Led_p = %b | real Led_R = %b | real Led_V = %b | real medio = %b | real P_Acu = %b | real Puntos = %b | ",Color_prev,cont_prev,dificil_prev,Disp_Decenas_prev,Disp_Unidades_prev,En_cont_prev,En_RC_prev,ESTADOS_prev,facil_prev,Hay_3C_prev,Led_Am_prev,Led_Az_prev,Led_Oport_prev,Led_p_prev,Led_R_prev,Led_V_prev,medio_prev,P_Acu_prev,Puntos_prev);
`endif
	if (
		( dificil_expected_prev !== 1'bx ) && ( dificil_prev !== dificil_expected_prev )
		&& ((dificil_expected_prev !== last_dificil_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dificil :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dificil_expected_prev);
		$display ("     Real value = %b", dificil_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_dificil_exp = dificil_expected_prev;
	end
	if (
		( Disp_Decenas_expected_prev[0] !== 1'bx ) && ( Disp_Decenas_prev[0] !== Disp_Decenas_expected_prev[0] )
		&& ((Disp_Decenas_expected_prev[0] !== last_Disp_Decenas_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Decenas[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Decenas_expected_prev);
		$display ("     Real value = %b", Disp_Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Disp_Decenas_exp[0] = Disp_Decenas_expected_prev[0];
	end
	if (
		( Disp_Decenas_expected_prev[1] !== 1'bx ) && ( Disp_Decenas_prev[1] !== Disp_Decenas_expected_prev[1] )
		&& ((Disp_Decenas_expected_prev[1] !== last_Disp_Decenas_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Decenas[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Decenas_expected_prev);
		$display ("     Real value = %b", Disp_Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Disp_Decenas_exp[1] = Disp_Decenas_expected_prev[1];
	end
	if (
		( Disp_Decenas_expected_prev[2] !== 1'bx ) && ( Disp_Decenas_prev[2] !== Disp_Decenas_expected_prev[2] )
		&& ((Disp_Decenas_expected_prev[2] !== last_Disp_Decenas_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Decenas[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Decenas_expected_prev);
		$display ("     Real value = %b", Disp_Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Disp_Decenas_exp[2] = Disp_Decenas_expected_prev[2];
	end
	if (
		( Disp_Decenas_expected_prev[3] !== 1'bx ) && ( Disp_Decenas_prev[3] !== Disp_Decenas_expected_prev[3] )
		&& ((Disp_Decenas_expected_prev[3] !== last_Disp_Decenas_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Decenas[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Decenas_expected_prev);
		$display ("     Real value = %b", Disp_Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Disp_Decenas_exp[3] = Disp_Decenas_expected_prev[3];
	end
	if (
		( Disp_Decenas_expected_prev[4] !== 1'bx ) && ( Disp_Decenas_prev[4] !== Disp_Decenas_expected_prev[4] )
		&& ((Disp_Decenas_expected_prev[4] !== last_Disp_Decenas_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Decenas[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Decenas_expected_prev);
		$display ("     Real value = %b", Disp_Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Disp_Decenas_exp[4] = Disp_Decenas_expected_prev[4];
	end
	if (
		( Disp_Decenas_expected_prev[5] !== 1'bx ) && ( Disp_Decenas_prev[5] !== Disp_Decenas_expected_prev[5] )
		&& ((Disp_Decenas_expected_prev[5] !== last_Disp_Decenas_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Decenas[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Decenas_expected_prev);
		$display ("     Real value = %b", Disp_Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Disp_Decenas_exp[5] = Disp_Decenas_expected_prev[5];
	end
	if (
		( Disp_Decenas_expected_prev[6] !== 1'bx ) && ( Disp_Decenas_prev[6] !== Disp_Decenas_expected_prev[6] )
		&& ((Disp_Decenas_expected_prev[6] !== last_Disp_Decenas_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Decenas[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Decenas_expected_prev);
		$display ("     Real value = %b", Disp_Decenas_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Disp_Decenas_exp[6] = Disp_Decenas_expected_prev[6];
	end
	if (
		( Disp_Unidades_expected_prev[0] !== 1'bx ) && ( Disp_Unidades_prev[0] !== Disp_Unidades_expected_prev[0] )
		&& ((Disp_Unidades_expected_prev[0] !== last_Disp_Unidades_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Unidades[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Unidades_expected_prev);
		$display ("     Real value = %b", Disp_Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Disp_Unidades_exp[0] = Disp_Unidades_expected_prev[0];
	end
	if (
		( Disp_Unidades_expected_prev[1] !== 1'bx ) && ( Disp_Unidades_prev[1] !== Disp_Unidades_expected_prev[1] )
		&& ((Disp_Unidades_expected_prev[1] !== last_Disp_Unidades_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Unidades[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Unidades_expected_prev);
		$display ("     Real value = %b", Disp_Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Disp_Unidades_exp[1] = Disp_Unidades_expected_prev[1];
	end
	if (
		( Disp_Unidades_expected_prev[2] !== 1'bx ) && ( Disp_Unidades_prev[2] !== Disp_Unidades_expected_prev[2] )
		&& ((Disp_Unidades_expected_prev[2] !== last_Disp_Unidades_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Unidades[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Unidades_expected_prev);
		$display ("     Real value = %b", Disp_Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Disp_Unidades_exp[2] = Disp_Unidades_expected_prev[2];
	end
	if (
		( Disp_Unidades_expected_prev[3] !== 1'bx ) && ( Disp_Unidades_prev[3] !== Disp_Unidades_expected_prev[3] )
		&& ((Disp_Unidades_expected_prev[3] !== last_Disp_Unidades_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Unidades[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Unidades_expected_prev);
		$display ("     Real value = %b", Disp_Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Disp_Unidades_exp[3] = Disp_Unidades_expected_prev[3];
	end
	if (
		( Disp_Unidades_expected_prev[4] !== 1'bx ) && ( Disp_Unidades_prev[4] !== Disp_Unidades_expected_prev[4] )
		&& ((Disp_Unidades_expected_prev[4] !== last_Disp_Unidades_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Unidades[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Unidades_expected_prev);
		$display ("     Real value = %b", Disp_Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Disp_Unidades_exp[4] = Disp_Unidades_expected_prev[4];
	end
	if (
		( Disp_Unidades_expected_prev[5] !== 1'bx ) && ( Disp_Unidades_prev[5] !== Disp_Unidades_expected_prev[5] )
		&& ((Disp_Unidades_expected_prev[5] !== last_Disp_Unidades_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Unidades[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Unidades_expected_prev);
		$display ("     Real value = %b", Disp_Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Disp_Unidades_exp[5] = Disp_Unidades_expected_prev[5];
	end
	if (
		( Disp_Unidades_expected_prev[6] !== 1'bx ) && ( Disp_Unidades_prev[6] !== Disp_Unidades_expected_prev[6] )
		&& ((Disp_Unidades_expected_prev[6] !== last_Disp_Unidades_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Disp_Unidades[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Disp_Unidades_expected_prev);
		$display ("     Real value = %b", Disp_Unidades_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Disp_Unidades_exp[6] = Disp_Unidades_expected_prev[6];
	end
	if (
		( ESTADOS_expected_prev[0] !== 1'bx ) && ( ESTADOS_prev[0] !== ESTADOS_expected_prev[0] )
		&& ((ESTADOS_expected_prev[0] !== last_ESTADOS_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTADOS[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTADOS_expected_prev);
		$display ("     Real value = %b", ESTADOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTADOS_exp[0] = ESTADOS_expected_prev[0];
	end
	if (
		( ESTADOS_expected_prev[1] !== 1'bx ) && ( ESTADOS_prev[1] !== ESTADOS_expected_prev[1] )
		&& ((ESTADOS_expected_prev[1] !== last_ESTADOS_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTADOS[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTADOS_expected_prev);
		$display ("     Real value = %b", ESTADOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTADOS_exp[1] = ESTADOS_expected_prev[1];
	end
	if (
		( ESTADOS_expected_prev[2] !== 1'bx ) && ( ESTADOS_prev[2] !== ESTADOS_expected_prev[2] )
		&& ((ESTADOS_expected_prev[2] !== last_ESTADOS_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTADOS[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTADOS_expected_prev);
		$display ("     Real value = %b", ESTADOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTADOS_exp[2] = ESTADOS_expected_prev[2];
	end
	if (
		( ESTADOS_expected_prev[3] !== 1'bx ) && ( ESTADOS_prev[3] !== ESTADOS_expected_prev[3] )
		&& ((ESTADOS_expected_prev[3] !== last_ESTADOS_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTADOS[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTADOS_expected_prev);
		$display ("     Real value = %b", ESTADOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTADOS_exp[3] = ESTADOS_expected_prev[3];
	end
	if (
		( ESTADOS_expected_prev[4] !== 1'bx ) && ( ESTADOS_prev[4] !== ESTADOS_expected_prev[4] )
		&& ((ESTADOS_expected_prev[4] !== last_ESTADOS_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ESTADOS[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ESTADOS_expected_prev);
		$display ("     Real value = %b", ESTADOS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ESTADOS_exp[4] = ESTADOS_expected_prev[4];
	end
	if (
		( facil_expected_prev !== 1'bx ) && ( facil_prev !== facil_expected_prev )
		&& ((facil_expected_prev !== last_facil_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port facil :: @time = %t",  $realtime);
		$display ("     Expected value = %b", facil_expected_prev);
		$display ("     Real value = %b", facil_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_facil_exp = facil_expected_prev;
	end
	if (
		( Led_Am_expected_prev[0] !== 1'bx ) && ( Led_Am_prev[0] !== Led_Am_expected_prev[0] )
		&& ((Led_Am_expected_prev[0] !== last_Led_Am_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Am[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Am_expected_prev);
		$display ("     Real value = %b", Led_Am_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Led_Am_exp[0] = Led_Am_expected_prev[0];
	end
	if (
		( Led_Am_expected_prev[1] !== 1'bx ) && ( Led_Am_prev[1] !== Led_Am_expected_prev[1] )
		&& ((Led_Am_expected_prev[1] !== last_Led_Am_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Am[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Am_expected_prev);
		$display ("     Real value = %b", Led_Am_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Led_Am_exp[1] = Led_Am_expected_prev[1];
	end
	if (
		( Led_Am_expected_prev[2] !== 1'bx ) && ( Led_Am_prev[2] !== Led_Am_expected_prev[2] )
		&& ((Led_Am_expected_prev[2] !== last_Led_Am_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Am[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Am_expected_prev);
		$display ("     Real value = %b", Led_Am_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Led_Am_exp[2] = Led_Am_expected_prev[2];
	end
	if (
		( Led_Am_expected_prev[3] !== 1'bx ) && ( Led_Am_prev[3] !== Led_Am_expected_prev[3] )
		&& ((Led_Am_expected_prev[3] !== last_Led_Am_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Am[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Am_expected_prev);
		$display ("     Real value = %b", Led_Am_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Led_Am_exp[3] = Led_Am_expected_prev[3];
	end
	if (
		( Led_Am_expected_prev[4] !== 1'bx ) && ( Led_Am_prev[4] !== Led_Am_expected_prev[4] )
		&& ((Led_Am_expected_prev[4] !== last_Led_Am_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Am[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Am_expected_prev);
		$display ("     Real value = %b", Led_Am_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Led_Am_exp[4] = Led_Am_expected_prev[4];
	end
	if (
		( Led_Az_expected_prev[0] !== 1'bx ) && ( Led_Az_prev[0] !== Led_Az_expected_prev[0] )
		&& ((Led_Az_expected_prev[0] !== last_Led_Az_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Az[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Az_expected_prev);
		$display ("     Real value = %b", Led_Az_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Led_Az_exp[0] = Led_Az_expected_prev[0];
	end
	if (
		( Led_Az_expected_prev[1] !== 1'bx ) && ( Led_Az_prev[1] !== Led_Az_expected_prev[1] )
		&& ((Led_Az_expected_prev[1] !== last_Led_Az_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Az[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Az_expected_prev);
		$display ("     Real value = %b", Led_Az_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Led_Az_exp[1] = Led_Az_expected_prev[1];
	end
	if (
		( Led_Az_expected_prev[2] !== 1'bx ) && ( Led_Az_prev[2] !== Led_Az_expected_prev[2] )
		&& ((Led_Az_expected_prev[2] !== last_Led_Az_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Az[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Az_expected_prev);
		$display ("     Real value = %b", Led_Az_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Led_Az_exp[2] = Led_Az_expected_prev[2];
	end
	if (
		( Led_Az_expected_prev[3] !== 1'bx ) && ( Led_Az_prev[3] !== Led_Az_expected_prev[3] )
		&& ((Led_Az_expected_prev[3] !== last_Led_Az_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Az[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Az_expected_prev);
		$display ("     Real value = %b", Led_Az_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Led_Az_exp[3] = Led_Az_expected_prev[3];
	end
	if (
		( Led_Az_expected_prev[4] !== 1'bx ) && ( Led_Az_prev[4] !== Led_Az_expected_prev[4] )
		&& ((Led_Az_expected_prev[4] !== last_Led_Az_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Az[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Az_expected_prev);
		$display ("     Real value = %b", Led_Az_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_Led_Az_exp[4] = Led_Az_expected_prev[4];
	end
	if (
		( Led_Oport_expected_prev[0] !== 1'bx ) && ( Led_Oport_prev[0] !== Led_Oport_expected_prev[0] )
		&& ((Led_Oport_expected_prev[0] !== last_Led_Oport_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Oport[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Oport_expected_prev);
		$display ("     Real value = %b", Led_Oport_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Led_Oport_exp[0] = Led_Oport_expected_prev[0];
	end
	if (
		( Led_Oport_expected_prev[1] !== 1'bx ) && ( Led_Oport_prev[1] !== Led_Oport_expected_prev[1] )
		&& ((Led_Oport_expected_prev[1] !== last_Led_Oport_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Oport[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Oport_expected_prev);
		$display ("     Real value = %b", Led_Oport_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Led_Oport_exp[1] = Led_Oport_expected_prev[1];
	end
	if (
		( Led_Oport_expected_prev[2] !== 1'bx ) && ( Led_Oport_prev[2] !== Led_Oport_expected_prev[2] )
		&& ((Led_Oport_expected_prev[2] !== last_Led_Oport_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_Oport[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_Oport_expected_prev);
		$display ("     Real value = %b", Led_Oport_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Led_Oport_exp[2] = Led_Oport_expected_prev[2];
	end
	if (
		( Led_R_expected_prev[0] !== 1'bx ) && ( Led_R_prev[0] !== Led_R_expected_prev[0] )
		&& ((Led_R_expected_prev[0] !== last_Led_R_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_R_expected_prev);
		$display ("     Real value = %b", Led_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Led_R_exp[0] = Led_R_expected_prev[0];
	end
	if (
		( Led_R_expected_prev[1] !== 1'bx ) && ( Led_R_prev[1] !== Led_R_expected_prev[1] )
		&& ((Led_R_expected_prev[1] !== last_Led_R_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_R_expected_prev);
		$display ("     Real value = %b", Led_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Led_R_exp[1] = Led_R_expected_prev[1];
	end
	if (
		( Led_R_expected_prev[2] !== 1'bx ) && ( Led_R_prev[2] !== Led_R_expected_prev[2] )
		&& ((Led_R_expected_prev[2] !== last_Led_R_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_R_expected_prev);
		$display ("     Real value = %b", Led_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Led_R_exp[2] = Led_R_expected_prev[2];
	end
	if (
		( Led_R_expected_prev[3] !== 1'bx ) && ( Led_R_prev[3] !== Led_R_expected_prev[3] )
		&& ((Led_R_expected_prev[3] !== last_Led_R_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_R_expected_prev);
		$display ("     Real value = %b", Led_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Led_R_exp[3] = Led_R_expected_prev[3];
	end
	if (
		( Led_R_expected_prev[4] !== 1'bx ) && ( Led_R_prev[4] !== Led_R_expected_prev[4] )
		&& ((Led_R_expected_prev[4] !== last_Led_R_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_R[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_R_expected_prev);
		$display ("     Real value = %b", Led_R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Led_R_exp[4] = Led_R_expected_prev[4];
	end
	if (
		( Led_V_expected_prev[0] !== 1'bx ) && ( Led_V_prev[0] !== Led_V_expected_prev[0] )
		&& ((Led_V_expected_prev[0] !== last_Led_V_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_V[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_V_expected_prev);
		$display ("     Real value = %b", Led_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Led_V_exp[0] = Led_V_expected_prev[0];
	end
	if (
		( Led_V_expected_prev[1] !== 1'bx ) && ( Led_V_prev[1] !== Led_V_expected_prev[1] )
		&& ((Led_V_expected_prev[1] !== last_Led_V_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_V[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_V_expected_prev);
		$display ("     Real value = %b", Led_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Led_V_exp[1] = Led_V_expected_prev[1];
	end
	if (
		( Led_V_expected_prev[2] !== 1'bx ) && ( Led_V_prev[2] !== Led_V_expected_prev[2] )
		&& ((Led_V_expected_prev[2] !== last_Led_V_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_V[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_V_expected_prev);
		$display ("     Real value = %b", Led_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Led_V_exp[2] = Led_V_expected_prev[2];
	end
	if (
		( Led_V_expected_prev[3] !== 1'bx ) && ( Led_V_prev[3] !== Led_V_expected_prev[3] )
		&& ((Led_V_expected_prev[3] !== last_Led_V_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_V[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_V_expected_prev);
		$display ("     Real value = %b", Led_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Led_V_exp[3] = Led_V_expected_prev[3];
	end
	if (
		( Led_V_expected_prev[4] !== 1'bx ) && ( Led_V_prev[4] !== Led_V_expected_prev[4] )
		&& ((Led_V_expected_prev[4] !== last_Led_V_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led_V[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led_V_expected_prev);
		$display ("     Real value = %b", Led_V_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Led_V_exp[4] = Led_V_expected_prev[4];
	end
	if (
		( medio_expected_prev !== 1'bx ) && ( medio_prev !== medio_expected_prev )
		&& ((medio_expected_prev !== last_medio_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port medio :: @time = %t",  $realtime);
		$display ("     Expected value = %b", medio_expected_prev);
		$display ("     Real value = %b", medio_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_medio_exp = medio_expected_prev;
	end
	if (
		( P_Acu_expected_prev[0] !== 1'bx ) && ( P_Acu_prev[0] !== P_Acu_expected_prev[0] )
		&& ((P_Acu_expected_prev[0] !== last_P_Acu_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_Acu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_Acu_expected_prev);
		$display ("     Real value = %b", P_Acu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_P_Acu_exp[0] = P_Acu_expected_prev[0];
	end
	if (
		( P_Acu_expected_prev[1] !== 1'bx ) && ( P_Acu_prev[1] !== P_Acu_expected_prev[1] )
		&& ((P_Acu_expected_prev[1] !== last_P_Acu_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_Acu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_Acu_expected_prev);
		$display ("     Real value = %b", P_Acu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_P_Acu_exp[1] = P_Acu_expected_prev[1];
	end
	if (
		( P_Acu_expected_prev[2] !== 1'bx ) && ( P_Acu_prev[2] !== P_Acu_expected_prev[2] )
		&& ((P_Acu_expected_prev[2] !== last_P_Acu_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_Acu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_Acu_expected_prev);
		$display ("     Real value = %b", P_Acu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_P_Acu_exp[2] = P_Acu_expected_prev[2];
	end
	if (
		( P_Acu_expected_prev[3] !== 1'bx ) && ( P_Acu_prev[3] !== P_Acu_expected_prev[3] )
		&& ((P_Acu_expected_prev[3] !== last_P_Acu_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_Acu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_Acu_expected_prev);
		$display ("     Real value = %b", P_Acu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_P_Acu_exp[3] = P_Acu_expected_prev[3];
	end
	if (
		( P_Acu_expected_prev[4] !== 1'bx ) && ( P_Acu_prev[4] !== P_Acu_expected_prev[4] )
		&& ((P_Acu_expected_prev[4] !== last_P_Acu_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_Acu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_Acu_expected_prev);
		$display ("     Real value = %b", P_Acu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_P_Acu_exp[4] = P_Acu_expected_prev[4];
	end
	if (
		( P_Acu_expected_prev[5] !== 1'bx ) && ( P_Acu_prev[5] !== P_Acu_expected_prev[5] )
		&& ((P_Acu_expected_prev[5] !== last_P_Acu_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P_Acu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P_Acu_expected_prev);
		$display ("     Real value = %b", P_Acu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_P_Acu_exp[5] = P_Acu_expected_prev[5];
	end
	if (
		( Puntos_expected_prev[0] !== 1'bx ) && ( Puntos_prev[0] !== Puntos_expected_prev[0] )
		&& ((Puntos_expected_prev[0] !== last_Puntos_exp[0]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Puntos[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Puntos_expected_prev);
		$display ("     Real value = %b", Puntos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_Puntos_exp[0] = Puntos_expected_prev[0];
	end
	if (
		( Puntos_expected_prev[1] !== 1'bx ) && ( Puntos_prev[1] !== Puntos_expected_prev[1] )
		&& ((Puntos_expected_prev[1] !== last_Puntos_exp[1]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Puntos[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Puntos_expected_prev);
		$display ("     Real value = %b", Puntos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_Puntos_exp[1] = Puntos_expected_prev[1];
	end
	if (
		( Puntos_expected_prev[2] !== 1'bx ) && ( Puntos_prev[2] !== Puntos_expected_prev[2] )
		&& ((Puntos_expected_prev[2] !== last_Puntos_exp[2]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Puntos[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Puntos_expected_prev);
		$display ("     Real value = %b", Puntos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_Puntos_exp[2] = Puntos_expected_prev[2];
	end
	if (
		( Puntos_expected_prev[3] !== 1'bx ) && ( Puntos_prev[3] !== Puntos_expected_prev[3] )
		&& ((Puntos_expected_prev[3] !== last_Puntos_exp[3]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Puntos[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Puntos_expected_prev);
		$display ("     Real value = %b", Puntos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_Puntos_exp[3] = Puntos_expected_prev[3];
	end
	if (
		( Puntos_expected_prev[4] !== 1'bx ) && ( Puntos_prev[4] !== Puntos_expected_prev[4] )
		&& ((Puntos_expected_prev[4] !== last_Puntos_exp[4]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Puntos[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Puntos_expected_prev);
		$display ("     Real value = %b", Puntos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_Puntos_exp[4] = Puntos_expected_prev[4];
	end
	if (
		( Puntos_expected_prev[5] !== 1'bx ) && ( Puntos_prev[5] !== Puntos_expected_prev[5] )
		&& ((Puntos_expected_prev[5] !== last_Puntos_exp[5]) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Puntos[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Puntos_expected_prev);
		$display ("     Real value = %b", Puntos_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_Puntos_exp[5] = Puntos_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#2000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Proyecto_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Amarillo;
reg Azul;
reg Clock;
reg Clock_1s;
reg Clock_100k;
reg Consultar;
reg Jugar;
reg Reset;
reg Rojo;
reg Start;
reg Verde;
// wires                                               
wire [3:0] Color;
wire [5:0] cont;
wire dificil;
wire [6:0] Disp_Decenas;
wire [6:0] Disp_Unidades;
wire En_cont;
wire En_RC;
wire [4:0] ESTADOS;
wire facil;
wire [3:0] Hay_3C;
wire [4:0] Led_Am;
wire [4:0] Led_Az;
wire [2:0] Led_Oport;
wire Led_p;
wire [4:0] Led_R;
wire [4:0] Led_V;
wire medio;
wire [5:0] P_Acu;
wire [5:0] Puntos;

wire sampler;                             

// assign statements (if any)                          
Proyecto i1 (
// port map - connection between master ports and signals/registers   
	.Amarillo(Amarillo),
	.Azul(Azul),
	.Clock(Clock),
	.Clock_1s(Clock_1s),
	.Clock_100k(Clock_100k),
	.Color(Color),
	.Consultar(Consultar),
	.cont(cont),
	.dificil(dificil),
	.Disp_Decenas(Disp_Decenas),
	.Disp_Unidades(Disp_Unidades),
	.En_cont(En_cont),
	.En_RC(En_RC),
	.ESTADOS(ESTADOS),
	.facil(facil),
	.Hay_3C(Hay_3C),
	.Jugar(Jugar),
	.Led_Am(Led_Am),
	.Led_Az(Led_Az),
	.Led_Oport(Led_Oport),
	.Led_p(Led_p),
	.Led_R(Led_R),
	.Led_V(Led_V),
	.medio(medio),
	.P_Acu(P_Acu),
	.Puntos(Puntos),
	.Reset(Reset),
	.Rojo(Rojo),
	.Start(Start),
	.Verde(Verde)
);

// Clock_100k
always
begin
	Clock_100k = 1'b0;
	Clock_100k = #50 1'b1;
	#50;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #5000 1'b1;
	#5000;
end 

// Clock_1s
always
begin
	Clock_1s = 1'b0;
	Clock_1s = #10000 1'b1;
	#10000;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #10000 1'b1;
end 

// Start
initial
begin
	Start = 1'b0;
	Start = #10000 1'b1;
	Start = #20000 1'b0;
end 

// Jugar
initial
begin
	Jugar = 1'b0;
	Jugar = #10000 1'b1;
	Jugar = #50000 1'b0;
end 

// Consultar
initial
begin
	Consultar = 1'b0;
end 

// Rojo
initial
begin
	Rojo = 1'b0;
	Rojo = #160000 1'b1;
	Rojo = #30000 1'b0;
	Rojo = #10000 1'b1;
	Rojo = #30000 1'b0;
end 

// Verde
initial
begin
	Verde = 1'b0;
	Verde = #350000 1'b1;
	Verde = #30000 1'b0;
end 

// Amarillo
initial
begin
	Amarillo = 1'b0;
	Amarillo = #700000 1'b1;
	Amarillo = #30000 1'b0;
end 

// Azul
initial
begin
	Azul = 1'b0;
	Azul = #530000 1'b1;
	Azul = #30000 1'b0;
end 

Proyecto_vlg_sample_tst tb_sample (
	.Amarillo(Amarillo),
	.Azul(Azul),
	.Clock(Clock),
	.Clock_1s(Clock_1s),
	.Clock_100k(Clock_100k),
	.Consultar(Consultar),
	.Jugar(Jugar),
	.Reset(Reset),
	.Rojo(Rojo),
	.Start(Start),
	.Verde(Verde),
	.sampler_tx(sampler)
);

Proyecto_vlg_check_tst tb_out(
	.Color(Color),
	.cont(cont),
	.dificil(dificil),
	.Disp_Decenas(Disp_Decenas),
	.Disp_Unidades(Disp_Unidades),
	.En_cont(En_cont),
	.En_RC(En_RC),
	.ESTADOS(ESTADOS),
	.facil(facil),
	.Hay_3C(Hay_3C),
	.Led_Am(Led_Am),
	.Led_Az(Led_Az),
	.Led_Oport(Led_Oport),
	.Led_p(Led_p),
	.Led_R(Led_R),
	.Led_V(Led_V),
	.medio(medio),
	.P_Acu(P_Acu),
	.Puntos(Puntos),
	.sampler_rx(sampler)
);
endmodule

